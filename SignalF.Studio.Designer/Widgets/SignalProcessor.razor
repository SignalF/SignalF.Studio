@using SignalF.Studio.Designer.Models
@using SignalF.Studio.Designer.Widgets
@using Scotec.Blazor.Diagrams
@using Scotec.Blazor.Diagrams.Renderer

@if (Node == null)
{
    <div>Loading...</div>
}
else
{
    <div class="signal-processor-node" style="@($"width: {Node.Size.Width.ToInvariantString()}px; height: {Node.Size.Height.ToInvariantString()}px;")">
    @* <div class="signal-processor-node" style=""> *@
        <RadzenStack Orientation="Orientation.Vertical" Style="height: 100%;" Gap="0">
            <RadzenRow Style="" Gap="0">
                <RadzenTextBox Class="sf-signal-processor-header" @onpointerdown:stopPropagation="true" @bind-Value="@Node.Name" Placeholder="@Node.DefinitionName"/>
            </RadzenRow>
            <RadzenRow class="sf-signal-processor-body">
                <RadzenColumn Style="position: relative;">
                    @foreach (var port in Node.Ports)
                    {
                        <PortRenderer Model="port"></PortRenderer>
                        @if (port.Alignment == PortAlignment.Left)
                        {
                            <div style="position: absolute; top: @(port.Position.Y.ToInvariantString())px; left: @(port.Size.Width.ToInvariantString())px; width: @((Node.Size.Width / 2.0 - port.Size.Width).ToInvariantString())px; height: @(port.Size.Height.ToInvariantString())px">
                                @* <RadzenText Text="abc" class="sf-signal-processor-port-name" /> *@
                                <RadzenTextBox Class="sf-signal-processor-port-name" @onpointerdown:stopPropagation="true" @bind-Value="@port.Name" Placeholder="@port.DefinitionName" />

                            </div>
                        }
                    }
                </RadzenColumn>
                @* <RadzenColumn Size="6" Style="position: relative;">
                    @foreach (var port in Node.Ports.Where(port => port.Alignment == PortAlignment.Left))
                    {
                        <PortRenderer Model="port"></PortRenderer>
                    }
                </RadzenColumn>
                <RadzenColumn Size="6" Style="position: relative">
                    @foreach (var port in Node.Ports.Where(node => node.Alignment == PortAlignment.Right))
                    {
                        <PortRenderer Model="port"/>
                    }
                </RadzenColumn> *@
            </RadzenRow>
        </RadzenStack>
    </div>
}

@code {

    // This gets filled by the library
    [Parameter] public SignalProcessorNodeModel Node { get; set; }

}