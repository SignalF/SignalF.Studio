@using Microsoft.CodeAnalysis.Elfie.Diagnostics
@using SignalF.Studio.Designer.Nodes
@using Point = Blazor.Diagrams.Core.Geometry.Point


@if (Node == null)
{
    <div>Loading...</div>
}
else
{
    <div class="signal-processor-node" style=@($"width: {Node.Size?.Width}px; height: {Node.Size?.Height}px;")>
        <RadzenStack Orientation="Orientation.Vertical" Style="height: 100%" Gap="0">
            <RadzenRow Style="" Gap="0">
                <RadzenTextBox Class="sf-signal-processor-header" @bind-Value="@Node.Name" Placeholder="@Node.DefinitionName"/>
            </RadzenRow>
            <RadzenRow Style="height: 100%;">
                <div class="sf-signal-processor-body" style="height: 100%">
                    @{
                        double y = 60;
                        foreach (var port in Node.Ports.OfType<SignalProcessorPortModel>())
                        {
                            // port.Offset = y;
                            // port.Position = new Point(Node.Position.X, Node.Position.Y + y);
                            <SignalProcessorPort Port="port"/>
                            y += 40;
                        }
                    }
                </div>
            </RadzenRow>
        </RadzenStack>
    </div>

}

@code {
    // This gets filled by the library
    [Parameter] public SignalProcessorNodeModel? Node { get; set; }

}
